
walking-talkbox.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000006  00800100  00000988  00000a1c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000988  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800106  00800106  00000a22  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000a22  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000a54  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000078  00000000  00000000  00000a94  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000d6e  00000000  00000000  00000b0c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007e6  00000000  00000000  0000187a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000737  00000000  00000000  00002060  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000114  00000000  00000000  00002798  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000047b  00000000  00000000  000028ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000419  00000000  00000000  00002d27  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000088  00000000  00000000  00003140  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e8 e8       	ldi	r30, 0x88	; 136
  7c:	f9 e0       	ldi	r31, 0x09	; 9
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a6 30       	cpi	r26, 0x06	; 6
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a6 e0       	ldi	r26, 0x06	; 6
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a8 30       	cpi	r26, 0x08	; 8
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 25 02 	call	0x44a	; 0x44a <main>
  9e:	0c 94 c2 04 	jmp	0x984	; 0x984 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <sendValue>:
			sendValue(0x00);
			sendValue(0x00);
			sendValue(0x00);
		}
	}
}
  a6:	90 e0       	ldi	r25, 0x00	; 0
  a8:	1b c0       	rjmp	.+54     	; 0xe0 <sendValue+0x3a>
  aa:	47 e0       	ldi	r20, 0x07	; 7
  ac:	50 e0       	ldi	r21, 0x00	; 0
  ae:	49 1b       	sub	r20, r25
  b0:	51 09       	sbc	r21, r1
  b2:	28 2f       	mov	r18, r24
  b4:	30 e0       	ldi	r19, 0x00	; 0
  b6:	02 c0       	rjmp	.+4      	; 0xbc <sendValue+0x16>
  b8:	35 95       	asr	r19
  ba:	27 95       	ror	r18
  bc:	4a 95       	dec	r20
  be:	e2 f7       	brpl	.-8      	; 0xb8 <sendValue+0x12>
  c0:	20 fd       	sbrc	r18, 0
  c2:	04 c0       	rjmp	.+8      	; 0xcc <sendValue+0x26>
  c4:	25 b1       	in	r18, 0x05	; 5
  c6:	27 7f       	andi	r18, 0xF7	; 247
  c8:	25 b9       	out	0x05, r18	; 5
  ca:	03 c0       	rjmp	.+6      	; 0xd2 <sendValue+0x2c>
  cc:	25 b1       	in	r18, 0x05	; 5
  ce:	28 60       	ori	r18, 0x08	; 8
  d0:	25 b9       	out	0x05, r18	; 5
  d2:	25 b1       	in	r18, 0x05	; 5
  d4:	20 62       	ori	r18, 0x20	; 32
  d6:	25 b9       	out	0x05, r18	; 5
  d8:	25 b1       	in	r18, 0x05	; 5
  da:	2f 7d       	andi	r18, 0xDF	; 223
  dc:	25 b9       	out	0x05, r18	; 5
  de:	9f 5f       	subi	r25, 0xFF	; 255
  e0:	98 30       	cpi	r25, 0x08	; 8
  e2:	18 f3       	brcs	.-58     	; 0xaa <sendValue+0x4>
  e4:	08 95       	ret

000000e6 <start>:
  e6:	cf 93       	push	r28
  e8:	df 93       	push	r29
  ea:	c0 e0       	ldi	r28, 0x00	; 0
  ec:	d0 e0       	ldi	r29, 0x00	; 0
  ee:	04 c0       	rjmp	.+8      	; 0xf8 <start+0x12>
  f0:	80 e0       	ldi	r24, 0x00	; 0
  f2:	0e 94 53 00 	call	0xa6	; 0xa6 <sendValue>
  f6:	21 96       	adiw	r28, 0x01	; 1
  f8:	c4 30       	cpi	r28, 0x04	; 4
  fa:	d1 05       	cpc	r29, r1
  fc:	cc f3       	brlt	.-14     	; 0xf0 <start+0xa>
  fe:	df 91       	pop	r29
 100:	cf 91       	pop	r28
 102:	08 95       	ret

00000104 <writeLEDBlock>:

void writeLEDBlock(uint8_t center_pos, uint8_t R, uint8_t G, uint8_t B)
{
 104:	ef 92       	push	r14
 106:	ff 92       	push	r15
 108:	0f 93       	push	r16
 10a:	1f 93       	push	r17
 10c:	cf 93       	push	r28
 10e:	df 93       	push	r29
 110:	18 2f       	mov	r17, r24
 112:	e6 2e       	mov	r14, r22
 114:	f4 2e       	mov	r15, r20
 116:	02 2f       	mov	r16, r18
	start();
 118:	0e 94 73 00 	call	0xe6	; 0xe6 <start>
	for(int i = 0; i < NUM_LEDS; i++)
 11c:	c0 e0       	ldi	r28, 0x00	; 0
 11e:	d0 e0       	ldi	r29, 0x00	; 0
 120:	71 c0       	rjmp	.+226    	; 0x204 <writeLEDBlock+0x100>
	{
		if(i == center_pos)
 122:	81 2f       	mov	r24, r17
 124:	90 e0       	ldi	r25, 0x00	; 0
 126:	c8 17       	cp	r28, r24
 128:	d9 07       	cpc	r29, r25
 12a:	69 f4       	brne	.+26     	; 0x146 <writeLEDBlock+0x42>
		{
			sendValue(0xFF);
 12c:	8f ef       	ldi	r24, 0xFF	; 255
 12e:	0e 94 53 00 	call	0xa6	; 0xa6 <sendValue>
			sendValue(B);
 132:	80 2f       	mov	r24, r16
 134:	0e 94 53 00 	call	0xa6	; 0xa6 <sendValue>
			sendValue(G);
 138:	8f 2d       	mov	r24, r15
 13a:	0e 94 53 00 	call	0xa6	; 0xa6 <sendValue>
			sendValue(R);
 13e:	8e 2d       	mov	r24, r14
 140:	0e 94 53 00 	call	0xa6	; 0xa6 <sendValue>
 144:	5e c0       	rjmp	.+188    	; 0x202 <writeLEDBlock+0xfe>
		}
		else if (i == center_pos - 1 && center_pos > 0)
 146:	9c 01       	movw	r18, r24
 148:	21 50       	subi	r18, 0x01	; 1
 14a:	31 09       	sbc	r19, r1
 14c:	c2 17       	cp	r28, r18
 14e:	d3 07       	cpc	r29, r19
 150:	79 f4       	brne	.+30     	; 0x170 <writeLEDBlock+0x6c>
 152:	11 23       	and	r17, r17
 154:	69 f0       	breq	.+26     	; 0x170 <writeLEDBlock+0x6c>
		{
			sendValue(0xEF);
 156:	8f ee       	ldi	r24, 0xEF	; 239
 158:	0e 94 53 00 	call	0xa6	; 0xa6 <sendValue>
			sendValue(B);
 15c:	80 2f       	mov	r24, r16
 15e:	0e 94 53 00 	call	0xa6	; 0xa6 <sendValue>
			sendValue(G);
 162:	8f 2d       	mov	r24, r15
 164:	0e 94 53 00 	call	0xa6	; 0xa6 <sendValue>
			sendValue(R);
 168:	8e 2d       	mov	r24, r14
 16a:	0e 94 53 00 	call	0xa6	; 0xa6 <sendValue>
 16e:	49 c0       	rjmp	.+146    	; 0x202 <writeLEDBlock+0xfe>
		}
		else if (i == center_pos + 1 && center_pos < NUM_LEDS - 1)
 170:	9c 01       	movw	r18, r24
 172:	2f 5f       	subi	r18, 0xFF	; 255
 174:	3f 4f       	sbci	r19, 0xFF	; 255
 176:	c2 17       	cp	r28, r18
 178:	d3 07       	cpc	r29, r19
 17a:	79 f4       	brne	.+30     	; 0x19a <writeLEDBlock+0x96>
 17c:	1e 31       	cpi	r17, 0x1E	; 30
 17e:	68 f4       	brcc	.+26     	; 0x19a <writeLEDBlock+0x96>
		{
			sendValue(0xEF);
 180:	8f ee       	ldi	r24, 0xEF	; 239
 182:	0e 94 53 00 	call	0xa6	; 0xa6 <sendValue>
			sendValue(B);
 186:	80 2f       	mov	r24, r16
 188:	0e 94 53 00 	call	0xa6	; 0xa6 <sendValue>
			sendValue(G);
 18c:	8f 2d       	mov	r24, r15
 18e:	0e 94 53 00 	call	0xa6	; 0xa6 <sendValue>
			sendValue(R);
 192:	8e 2d       	mov	r24, r14
 194:	0e 94 53 00 	call	0xa6	; 0xa6 <sendValue>
 198:	34 c0       	rjmp	.+104    	; 0x202 <writeLEDBlock+0xfe>
		}
		else if (i == center_pos - 2 && center_pos > 1)
 19a:	9c 01       	movw	r18, r24
 19c:	22 50       	subi	r18, 0x02	; 2
 19e:	31 09       	sbc	r19, r1
 1a0:	c2 17       	cp	r28, r18
 1a2:	d3 07       	cpc	r29, r19
 1a4:	79 f4       	brne	.+30     	; 0x1c4 <writeLEDBlock+0xc0>
 1a6:	12 30       	cpi	r17, 0x02	; 2
 1a8:	68 f0       	brcs	.+26     	; 0x1c4 <writeLEDBlock+0xc0>
		{
			sendValue(0xE1);
 1aa:	81 ee       	ldi	r24, 0xE1	; 225
 1ac:	0e 94 53 00 	call	0xa6	; 0xa6 <sendValue>
			sendValue(B);
 1b0:	80 2f       	mov	r24, r16
 1b2:	0e 94 53 00 	call	0xa6	; 0xa6 <sendValue>
			sendValue(G);
 1b6:	8f 2d       	mov	r24, r15
 1b8:	0e 94 53 00 	call	0xa6	; 0xa6 <sendValue>
			sendValue(R);
 1bc:	8e 2d       	mov	r24, r14
 1be:	0e 94 53 00 	call	0xa6	; 0xa6 <sendValue>
 1c2:	1f c0       	rjmp	.+62     	; 0x202 <writeLEDBlock+0xfe>
		}
		else if (i == center_pos + 2 && center_pos < NUM_LEDS - 2)
 1c4:	02 96       	adiw	r24, 0x02	; 2
 1c6:	c8 17       	cp	r28, r24
 1c8:	d9 07       	cpc	r29, r25
 1ca:	79 f4       	brne	.+30     	; 0x1ea <writeLEDBlock+0xe6>
 1cc:	1d 31       	cpi	r17, 0x1D	; 29
 1ce:	68 f4       	brcc	.+26     	; 0x1ea <writeLEDBlock+0xe6>
		{
			sendValue(0xE1);
 1d0:	81 ee       	ldi	r24, 0xE1	; 225
 1d2:	0e 94 53 00 	call	0xa6	; 0xa6 <sendValue>
			sendValue(B);
 1d6:	80 2f       	mov	r24, r16
 1d8:	0e 94 53 00 	call	0xa6	; 0xa6 <sendValue>
			sendValue(G);
 1dc:	8f 2d       	mov	r24, r15
 1de:	0e 94 53 00 	call	0xa6	; 0xa6 <sendValue>
			sendValue(R);
 1e2:	8e 2d       	mov	r24, r14
 1e4:	0e 94 53 00 	call	0xa6	; 0xa6 <sendValue>
 1e8:	0c c0       	rjmp	.+24     	; 0x202 <writeLEDBlock+0xfe>
		}
		else
		{
			sendValue(0xFF);
 1ea:	8f ef       	ldi	r24, 0xFF	; 255
 1ec:	0e 94 53 00 	call	0xa6	; 0xa6 <sendValue>
			sendValue(0x00);
 1f0:	80 e0       	ldi	r24, 0x00	; 0
 1f2:	0e 94 53 00 	call	0xa6	; 0xa6 <sendValue>
			sendValue(0x00);
 1f6:	80 e0       	ldi	r24, 0x00	; 0
 1f8:	0e 94 53 00 	call	0xa6	; 0xa6 <sendValue>
			sendValue(0x00);
 1fc:	80 e0       	ldi	r24, 0x00	; 0
 1fe:	0e 94 53 00 	call	0xa6	; 0xa6 <sendValue>
}

void writeLEDBlock(uint8_t center_pos, uint8_t R, uint8_t G, uint8_t B)
{
	start();
	for(int i = 0; i < NUM_LEDS; i++)
 202:	21 96       	adiw	r28, 0x01	; 1
 204:	cf 31       	cpi	r28, 0x1F	; 31
 206:	d1 05       	cpc	r29, r1
 208:	0c f4       	brge	.+2      	; 0x20c <writeLEDBlock+0x108>
 20a:	8b cf       	rjmp	.-234    	; 0x122 <writeLEDBlock+0x1e>
			sendValue(0x00);
			sendValue(0x00);
			sendValue(0x00);
		}
	}
}
 20c:	df 91       	pop	r29
 20e:	cf 91       	pop	r28
 210:	1f 91       	pop	r17
 212:	0f 91       	pop	r16
 214:	ff 90       	pop	r15
 216:	ef 90       	pop	r14
 218:	08 95       	ret

0000021a <resetLED>:

void resetLED()
{
 21a:	cf 93       	push	r28
 21c:	df 93       	push	r29
	sendValue(0x00);
 21e:	80 e0       	ldi	r24, 0x00	; 0
 220:	0e 94 53 00 	call	0xa6	; 0xa6 <sendValue>
	sendValue(0x00);
 224:	80 e0       	ldi	r24, 0x00	; 0
 226:	0e 94 53 00 	call	0xa6	; 0xa6 <sendValue>
	sendValue(0x00);
 22a:	80 e0       	ldi	r24, 0x00	; 0
 22c:	0e 94 53 00 	call	0xa6	; 0xa6 <sendValue>
	sendValue(0x00);
 230:	80 e0       	ldi	r24, 0x00	; 0
 232:	0e 94 53 00 	call	0xa6	; 0xa6 <sendValue>
	
	for(int i = 0; i < NUM_LEDS; i++)
 236:	c0 e0       	ldi	r28, 0x00	; 0
 238:	d0 e0       	ldi	r29, 0x00	; 0
 23a:	0d c0       	rjmp	.+26     	; 0x256 <resetLED+0x3c>
	{
		sendValue(0xFF);
 23c:	8f ef       	ldi	r24, 0xFF	; 255
 23e:	0e 94 53 00 	call	0xa6	; 0xa6 <sendValue>
		sendValue(0x00);
 242:	80 e0       	ldi	r24, 0x00	; 0
 244:	0e 94 53 00 	call	0xa6	; 0xa6 <sendValue>
		sendValue(0x00);
 248:	80 e0       	ldi	r24, 0x00	; 0
 24a:	0e 94 53 00 	call	0xa6	; 0xa6 <sendValue>
		sendValue(0x00);
 24e:	80 e0       	ldi	r24, 0x00	; 0
 250:	0e 94 53 00 	call	0xa6	; 0xa6 <sendValue>
	sendValue(0x00);
	sendValue(0x00);
	sendValue(0x00);
	sendValue(0x00);
	
	for(int i = 0; i < NUM_LEDS; i++)
 254:	21 96       	adiw	r28, 0x01	; 1
 256:	cf 31       	cpi	r28, 0x1F	; 31
 258:	d1 05       	cpc	r29, r1
 25a:	84 f3       	brlt	.-32     	; 0x23c <resetLED+0x22>
		sendValue(0xFF);
		sendValue(0x00);
		sendValue(0x00);
		sendValue(0x00);
	}
}
 25c:	df 91       	pop	r29
 25e:	cf 91       	pop	r28
 260:	08 95       	ret

00000262 <LEDInitialize>:

void LEDInitialize()
{
	DDRB |= (1 << DDB3);
 262:	84 b1       	in	r24, 0x04	; 4
 264:	88 60       	ori	r24, 0x08	; 8
 266:	84 b9       	out	0x04, r24	; 4
	DDRB |= (1 << DDB5);
 268:	84 b1       	in	r24, 0x04	; 4
 26a:	80 62       	ori	r24, 0x20	; 32
 26c:	84 b9       	out	0x04, r24	; 4
	
	resetLED();
 26e:	0e 94 0d 01 	call	0x21a	; 0x21a <resetLED>
 272:	08 95       	ret

00000274 <colors>:
enum {INCREMENT_R, DECREMENT_R, INCREMENT_G, DECREMENT_G, INCREMENT_B, DECREMENT_B};
int colorCycle = INCREMENT_G;

void colors(int pos)
{
	writeLEDBlock(pos, red, green, blue);
 274:	20 91 06 01 	lds	r18, 0x0106	; 0x800106 <__data_end>
 278:	40 91 07 01 	lds	r20, 0x0107	; 0x800107 <green>
 27c:	60 91 02 01 	lds	r22, 0x0102	; 0x800102 <red>
 280:	0e 94 82 00 	call	0x104	; 0x104 <writeLEDBlock>
	if (colorCycle == INCREMENT_G)
 284:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 288:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 28c:	82 30       	cpi	r24, 0x02	; 2
 28e:	91 05       	cpc	r25, r1
 290:	79 f4       	brne	.+30     	; 0x2b0 <colors+0x3c>
	{
		if (green == 0xFF)
 292:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <green>
 296:	8f 3f       	cpi	r24, 0xFF	; 255
 298:	39 f4       	brne	.+14     	; 0x2a8 <colors+0x34>
		{
			colorCycle = DECREMENT_R;
 29a:	81 e0       	ldi	r24, 0x01	; 1
 29c:	90 e0       	ldi	r25, 0x00	; 0
 29e:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 2a2:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
 2a6:	08 95       	ret
		}
		else
		{
			green++;
 2a8:	8f 5f       	subi	r24, 0xFF	; 255
 2aa:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <green>
 2ae:	08 95       	ret
		}
	}
	else if (colorCycle == DECREMENT_R)
 2b0:	81 30       	cpi	r24, 0x01	; 1
 2b2:	91 05       	cpc	r25, r1
 2b4:	79 f4       	brne	.+30     	; 0x2d4 <colors+0x60>
	{
		if (red == 0x00)
 2b6:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <red>
 2ba:	81 11       	cpse	r24, r1
 2bc:	07 c0       	rjmp	.+14     	; 0x2cc <colors+0x58>
		{
			colorCycle = INCREMENT_B;
 2be:	84 e0       	ldi	r24, 0x04	; 4
 2c0:	90 e0       	ldi	r25, 0x00	; 0
 2c2:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 2c6:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
 2ca:	08 95       	ret
		}
		else
		{
			red--;
 2cc:	81 50       	subi	r24, 0x01	; 1
 2ce:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <red>
 2d2:	08 95       	ret
		}
	}
	else if (colorCycle == INCREMENT_B)
 2d4:	84 30       	cpi	r24, 0x04	; 4
 2d6:	91 05       	cpc	r25, r1
 2d8:	79 f4       	brne	.+30     	; 0x2f8 <colors+0x84>
	{
		if (blue == 0xFF)
 2da:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <__data_end>
 2de:	8f 3f       	cpi	r24, 0xFF	; 255
 2e0:	39 f4       	brne	.+14     	; 0x2f0 <colors+0x7c>
		{
			colorCycle = DECREMENT_G;
 2e2:	83 e0       	ldi	r24, 0x03	; 3
 2e4:	90 e0       	ldi	r25, 0x00	; 0
 2e6:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 2ea:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
 2ee:	08 95       	ret
		}
		else
		{
			blue++;
 2f0:	8f 5f       	subi	r24, 0xFF	; 255
 2f2:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <__data_end>
 2f6:	08 95       	ret
		}
	}
	else if (colorCycle == DECREMENT_G)
 2f8:	83 30       	cpi	r24, 0x03	; 3
 2fa:	91 05       	cpc	r25, r1
 2fc:	69 f4       	brne	.+26     	; 0x318 <colors+0xa4>
	{
		if(green == 0x00)
 2fe:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <green>
 302:	81 11       	cpse	r24, r1
 304:	05 c0       	rjmp	.+10     	; 0x310 <colors+0x9c>
		{
			colorCycle = INCREMENT_R;
 306:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 30a:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
 30e:	08 95       	ret
		}
		else
		{
			green--;
 310:	81 50       	subi	r24, 0x01	; 1
 312:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <green>
 316:	08 95       	ret
		}
	}
	else if (colorCycle == INCREMENT_R)
 318:	00 97       	sbiw	r24, 0x00	; 0
 31a:	79 f4       	brne	.+30     	; 0x33a <colors+0xc6>
	{
		if (red == 0xFF)
 31c:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <red>
 320:	8f 3f       	cpi	r24, 0xFF	; 255
 322:	39 f4       	brne	.+14     	; 0x332 <colors+0xbe>
		{
			colorCycle = DECREMENT_B;
 324:	85 e0       	ldi	r24, 0x05	; 5
 326:	90 e0       	ldi	r25, 0x00	; 0
 328:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 32c:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
 330:	08 95       	ret
		}
		else
		{
			red++;
 332:	8f 5f       	subi	r24, 0xFF	; 255
 334:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <red>
 338:	08 95       	ret
		}
	}
	else if (colorCycle == DECREMENT_B)
 33a:	05 97       	sbiw	r24, 0x05	; 5
 33c:	71 f4       	brne	.+28     	; 0x35a <colors+0xe6>
	{
		if (blue == 0x00)
 33e:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <__data_end>
 342:	81 11       	cpse	r24, r1
 344:	07 c0       	rjmp	.+14     	; 0x354 <colors+0xe0>
		{
			colorCycle = INCREMENT_G;
 346:	82 e0       	ldi	r24, 0x02	; 2
 348:	90 e0       	ldi	r25, 0x00	; 0
 34a:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 34e:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
 352:	08 95       	ret
		}
		else
		{
			blue--;
 354:	81 50       	subi	r24, 0x01	; 1
 356:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <__data_end>
 35a:	08 95       	ret

0000035c <initialize>:
}

void initialize()
{	
//	SOFT-POT INTERNAL PULLUP
	PORTC |= (1 << PORTC0);
 35c:	88 b1       	in	r24, 0x08	; 8
 35e:	81 60       	ori	r24, 0x01	; 1
 360:	88 b9       	out	0x08, r24	; 8

//	OCTAVE SWITCH 1
	DDRD &= ~(1 << DDD7);
 362:	8a b1       	in	r24, 0x0a	; 10
 364:	8f 77       	andi	r24, 0x7F	; 127
 366:	8a b9       	out	0x0a, r24	; 10
	PORTD |= (1 << PORTD7);
 368:	8b b1       	in	r24, 0x0b	; 11
 36a:	80 68       	ori	r24, 0x80	; 128
 36c:	8b b9       	out	0x0b, r24	; 11
	
//	OCTAVE SWITCH 2
	DDRD &= ~(1 << DDD6);
 36e:	8a b1       	in	r24, 0x0a	; 10
 370:	8f 7b       	andi	r24, 0xBF	; 191
 372:	8a b9       	out	0x0a, r24	; 10
	PORTD |= (1 << PORTD6);
 374:	8b b1       	in	r24, 0x0b	; 11
 376:	80 64       	ori	r24, 0x40	; 64
 378:	8b b9       	out	0x0b, r24	; 11

//	OC0B OUT	
	DDRD |= (1 << DDD5);
 37a:	8a b1       	in	r24, 0x0a	; 10
 37c:	80 62       	ori	r24, 0x20	; 32
 37e:	8a b9       	out	0x0a, r24	; 10

//	TIMER0 SETUP
	TCCR0B &= ~(1 << CS00);
 380:	85 b5       	in	r24, 0x25	; 37
 382:	8e 7f       	andi	r24, 0xFE	; 254
 384:	85 bd       	out	0x25, r24	; 37
	TCCR0B &= ~(1 << CS01);
 386:	85 b5       	in	r24, 0x25	; 37
 388:	8d 7f       	andi	r24, 0xFD	; 253
 38a:	85 bd       	out	0x25, r24	; 37
	TCCR0B |= (1 << CS02);
 38c:	85 b5       	in	r24, 0x25	; 37
 38e:	84 60       	ori	r24, 0x04	; 4
 390:	85 bd       	out	0x25, r24	; 37

	TCCR0A |= (1 << WGM00);
 392:	84 b5       	in	r24, 0x24	; 36
 394:	81 60       	ori	r24, 0x01	; 1
 396:	84 bd       	out	0x24, r24	; 36
	TCCR0A |= (1 << WGM01);
 398:	84 b5       	in	r24, 0x24	; 36
 39a:	82 60       	ori	r24, 0x02	; 2
 39c:	84 bd       	out	0x24, r24	; 36
	TCCR0B |= (1 << WGM02);
 39e:	85 b5       	in	r24, 0x25	; 37
 3a0:	88 60       	ori	r24, 0x08	; 8
 3a2:	85 bd       	out	0x25, r24	; 37

	TCCR0A |= (1 << COM0A0);
 3a4:	84 b5       	in	r24, 0x24	; 36
 3a6:	80 64       	ori	r24, 0x40	; 64
 3a8:	84 bd       	out	0x24, r24	; 36
	TCCR0A &= ~(1 << COM0A1);
 3aa:	84 b5       	in	r24, 0x24	; 36
 3ac:	8f 77       	andi	r24, 0x7F	; 127
 3ae:	84 bd       	out	0x24, r24	; 36
	OCR0A = 255;
 3b0:	8f ef       	ldi	r24, 0xFF	; 255
 3b2:	87 bd       	out	0x27, r24	; 39
	
	TCCR0A &= ~(1 << COM0B0);
 3b4:	84 b5       	in	r24, 0x24	; 36
 3b6:	8f 7e       	andi	r24, 0xEF	; 239
 3b8:	84 bd       	out	0x24, r24	; 36
	TCCR0A |= (1 << COM0B1);
 3ba:	84 b5       	in	r24, 0x24	; 36
 3bc:	80 62       	ori	r24, 0x20	; 32
 3be:	84 bd       	out	0x24, r24	; 36
	OCR0B = 1;
 3c0:	81 e0       	ldi	r24, 0x01	; 1
 3c2:	88 bd       	out	0x28, r24	; 40
		
//	ADC SETUP
	PRR &= ~(1 << PRADC);
 3c4:	e4 e6       	ldi	r30, 0x64	; 100
 3c6:	f0 e0       	ldi	r31, 0x00	; 0
 3c8:	80 81       	ld	r24, Z
 3ca:	8e 7f       	andi	r24, 0xFE	; 254
 3cc:	80 83       	st	Z, r24
	
	// Vcc voltage reference
	ADMUX |= (1 << REFS0);
 3ce:	ac e7       	ldi	r26, 0x7C	; 124
 3d0:	b0 e0       	ldi	r27, 0x00	; 0
 3d2:	8c 91       	ld	r24, X
 3d4:	80 64       	ori	r24, 0x40	; 64
 3d6:	8c 93       	st	X, r24
	ADMUX &= ~(1 << REFS1);
 3d8:	8c 91       	ld	r24, X
 3da:	8f 77       	andi	r24, 0x7F	; 127
 3dc:	8c 93       	st	X, r24
	
	// 128 prescale = 125 kHz
	ADCSRA |= (1 << ADPS0);
 3de:	ea e7       	ldi	r30, 0x7A	; 122
 3e0:	f0 e0       	ldi	r31, 0x00	; 0
 3e2:	80 81       	ld	r24, Z
 3e4:	81 60       	ori	r24, 0x01	; 1
 3e6:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADPS1);
 3e8:	80 81       	ld	r24, Z
 3ea:	82 60       	ori	r24, 0x02	; 2
 3ec:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADPS2);
 3ee:	80 81       	ld	r24, Z
 3f0:	84 60       	ori	r24, 0x04	; 4
 3f2:	80 83       	st	Z, r24
	
	// ADC0
	ADMUX &= ~(1 << MUX0);
 3f4:	8c 91       	ld	r24, X
 3f6:	8e 7f       	andi	r24, 0xFE	; 254
 3f8:	8c 93       	st	X, r24
	ADMUX &= ~(1 << MUX1);
 3fa:	8c 91       	ld	r24, X
 3fc:	8d 7f       	andi	r24, 0xFD	; 253
 3fe:	8c 93       	st	X, r24
	ADMUX &= ~(1 << MUX2);
 400:	8c 91       	ld	r24, X
 402:	8b 7f       	andi	r24, 0xFB	; 251
 404:	8c 93       	st	X, r24
	ADMUX &= ~(1 << MUX3);
 406:	8c 91       	ld	r24, X
 408:	87 7f       	andi	r24, 0xF7	; 247
 40a:	8c 93       	st	X, r24
	
	// Auto trigger
	ADCSRA |= (1 << ADATE);
 40c:	80 81       	ld	r24, Z
 40e:	80 62       	ori	r24, 0x20	; 32
 410:	80 83       	st	Z, r24
	
	// Free running
	ADCSRB &= ~(1 << ADTS0);
 412:	ab e7       	ldi	r26, 0x7B	; 123
 414:	b0 e0       	ldi	r27, 0x00	; 0
 416:	8c 91       	ld	r24, X
 418:	8e 7f       	andi	r24, 0xFE	; 254
 41a:	8c 93       	st	X, r24
	ADCSRB &= ~(1 << ADTS1);
 41c:	8c 91       	ld	r24, X
 41e:	8d 7f       	andi	r24, 0xFD	; 253
 420:	8c 93       	st	X, r24
	ADCSRB &= ~(1 << ADTS2);
 422:	8c 91       	ld	r24, X
 424:	8b 7f       	andi	r24, 0xFB	; 251
 426:	8c 93       	st	X, r24
	
	// Digital input disable
	DIDR0 |= (1 << ADC0D);
 428:	ae e7       	ldi	r26, 0x7E	; 126
 42a:	b0 e0       	ldi	r27, 0x00	; 0
 42c:	8c 91       	ld	r24, X
 42e:	81 60       	ori	r24, 0x01	; 1
 430:	8c 93       	st	X, r24
	DIDR0 |= (1 << ADC1D);
 432:	8c 91       	ld	r24, X
 434:	82 60       	ori	r24, 0x02	; 2
 436:	8c 93       	st	X, r24
	
	// Enable ADC
	ADCSRA |= (1 << ADEN);
 438:	80 81       	ld	r24, Z
 43a:	80 68       	ori	r24, 0x80	; 128
 43c:	80 83       	st	Z, r24
	
	// Start conversion
	ADCSRA |= (1 << ADSC);
 43e:	80 81       	ld	r24, Z
 440:	80 64       	ori	r24, 0x40	; 64
 442:	80 83       	st	Z, r24
	
	LEDInitialize();
 444:	0e 94 31 01 	call	0x262	; 0x262 <LEDInitialize>
 448:	08 95       	ret

0000044a <main>:
}

int main(void)
{
	initialize();
 44a:	0e 94 ae 01 	call	0x35c	; 0x35c <initialize>
	while(1)
	{
		// OCTAVE CHECK
		if(!(PIND & ( 1 << PIND7)))
 44e:	4f 99       	sbic	0x09, 7	; 9
 450:	0a c0       	rjmp	.+20     	; 0x466 <main+0x1c>
		{
			TCCR0B |= (1 << CS00);
 452:	85 b5       	in	r24, 0x25	; 37
 454:	81 60       	ori	r24, 0x01	; 1
 456:	85 bd       	out	0x25, r24	; 37
			TCCR0B &= ~(1 << CS01);
 458:	85 b5       	in	r24, 0x25	; 37
 45a:	8d 7f       	andi	r24, 0xFD	; 253
 45c:	85 bd       	out	0x25, r24	; 37
			TCCR0B |= (1 << CS02);
 45e:	85 b5       	in	r24, 0x25	; 37
 460:	84 60       	ori	r24, 0x04	; 4
 462:	85 bd       	out	0x25, r24	; 37
 464:	0b c0       	rjmp	.+22     	; 0x47c <main+0x32>
		}
		else if (!(PIND & (1 << PIND6)))
 466:	4e 99       	sbic	0x09, 6	; 9
 468:	09 c0       	rjmp	.+18     	; 0x47c <main+0x32>
		{
			TCCR0B &= ~(1 << CS00);
 46a:	85 b5       	in	r24, 0x25	; 37
 46c:	8e 7f       	andi	r24, 0xFE	; 254
 46e:	85 bd       	out	0x25, r24	; 37
			TCCR0B &= ~(1 << CS01);
 470:	85 b5       	in	r24, 0x25	; 37
 472:	8d 7f       	andi	r24, 0xFD	; 253
 474:	85 bd       	out	0x25, r24	; 37
			TCCR0B |= (1 << CS02);
 476:	85 b5       	in	r24, 0x25	; 37
 478:	84 60       	ori	r24, 0x04	; 4
 47a:	85 bd       	out	0x25, r24	; 37
		}
				
		// PLAY NOTE IF TOUCHED
		if (ADC < 820)
 47c:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
 480:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
 484:	84 33       	cpi	r24, 0x34	; 52
 486:	93 40       	sbci	r25, 0x03	; 3
 488:	98 f0       	brcs	.+38     	; 0x4b0 <main+0x66>
 48a:	67 c0       	rjmp	.+206    	; 0x55a <main+0x110>
		{
			float ADC_temp = 0;
			for (int i = 0; i < 500; i++)
			{
				ADC_temp += ADC;
 48c:	60 91 78 00 	lds	r22, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
 490:	70 91 79 00 	lds	r23, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
 494:	80 e0       	ldi	r24, 0x00	; 0
 496:	90 e0       	ldi	r25, 0x00	; 0
 498:	0e 94 c7 03 	call	0x78e	; 0x78e <__floatunsisf>
 49c:	9b 01       	movw	r18, r22
 49e:	ac 01       	movw	r20, r24
 4a0:	c7 01       	movw	r24, r14
 4a2:	b6 01       	movw	r22, r12
 4a4:	0e 94 b3 02 	call	0x566	; 0x566 <__addsf3>
 4a8:	6b 01       	movw	r12, r22
 4aa:	7c 01       	movw	r14, r24
				
		// PLAY NOTE IF TOUCHED
		if (ADC < 820)
		{
			float ADC_temp = 0;
			for (int i = 0; i < 500; i++)
 4ac:	21 96       	adiw	r28, 0x01	; 1
 4ae:	05 c0       	rjmp	.+10     	; 0x4ba <main+0x70>
 4b0:	c0 e0       	ldi	r28, 0x00	; 0
 4b2:	d0 e0       	ldi	r29, 0x00	; 0
 4b4:	c1 2c       	mov	r12, r1
 4b6:	d1 2c       	mov	r13, r1
 4b8:	76 01       	movw	r14, r12
 4ba:	c4 3f       	cpi	r28, 0xF4	; 244
 4bc:	81 e0       	ldi	r24, 0x01	; 1
 4be:	d8 07       	cpc	r29, r24
 4c0:	2c f3       	brlt	.-54     	; 0x48c <main+0x42>
			{
				ADC_temp += ADC;
			}
			float ADC_avg = ADC_temp / 500;
 4c2:	20 e0       	ldi	r18, 0x00	; 0
 4c4:	30 e0       	ldi	r19, 0x00	; 0
 4c6:	4a ef       	ldi	r20, 0xFA	; 250
 4c8:	53 e4       	ldi	r21, 0x43	; 67
 4ca:	c7 01       	movw	r24, r14
 4cc:	b6 01       	movw	r22, r12
 4ce:	0e 94 1f 03 	call	0x63e	; 0x63e <__divsf3>
			OCR0A = ADC_avg - 510;
 4d2:	20 e0       	ldi	r18, 0x00	; 0
 4d4:	30 e0       	ldi	r19, 0x00	; 0
 4d6:	4f ef       	ldi	r20, 0xFF	; 255
 4d8:	53 e4       	ldi	r21, 0x43	; 67
 4da:	0e 94 b2 02 	call	0x564	; 0x564 <__subsf3>
 4de:	0e 94 98 03 	call	0x730	; 0x730 <__fixunssfsi>
 4e2:	67 bd       	out	0x27, r22	; 39
			OCR0B = (float)OCR0A / volume;
 4e4:	67 b5       	in	r22, 0x27	; 39
 4e6:	70 e0       	ldi	r23, 0x00	; 0
 4e8:	80 e0       	ldi	r24, 0x00	; 0
 4ea:	90 e0       	ldi	r25, 0x00	; 0
 4ec:	0e 94 c7 03 	call	0x78e	; 0x78e <__floatunsisf>
 4f0:	6b 01       	movw	r12, r22
 4f2:	7c 01       	movw	r14, r24
 4f4:	60 91 03 01 	lds	r22, 0x0103	; 0x800103 <volume>
 4f8:	70 91 04 01 	lds	r23, 0x0104	; 0x800104 <volume+0x1>
 4fc:	07 2e       	mov	r0, r23
 4fe:	00 0c       	add	r0, r0
 500:	88 0b       	sbc	r24, r24
 502:	99 0b       	sbc	r25, r25
 504:	0e 94 c9 03 	call	0x792	; 0x792 <__floatsisf>
 508:	9b 01       	movw	r18, r22
 50a:	ac 01       	movw	r20, r24
 50c:	c7 01       	movw	r24, r14
 50e:	b6 01       	movw	r22, r12
 510:	0e 94 1f 03 	call	0x63e	; 0x63e <__divsf3>
 514:	0e 94 98 03 	call	0x730	; 0x730 <__fixunssfsi>
 518:	68 bd       	out	0x28, r22	; 40
			int position = 30 - (OCR0A * ((float)30 / 255)) + 3;
 51a:	67 b5       	in	r22, 0x27	; 39
 51c:	70 e0       	ldi	r23, 0x00	; 0
 51e:	80 e0       	ldi	r24, 0x00	; 0
 520:	90 e0       	ldi	r25, 0x00	; 0
 522:	0e 94 c9 03 	call	0x792	; 0x792 <__floatsisf>
 526:	21 ef       	ldi	r18, 0xF1	; 241
 528:	30 ef       	ldi	r19, 0xF0	; 240
 52a:	40 ef       	ldi	r20, 0xF0	; 240
 52c:	5d e3       	ldi	r21, 0x3D	; 61
 52e:	0e 94 55 04 	call	0x8aa	; 0x8aa <__mulsf3>
 532:	9b 01       	movw	r18, r22
 534:	ac 01       	movw	r20, r24
 536:	60 e0       	ldi	r22, 0x00	; 0
 538:	70 e0       	ldi	r23, 0x00	; 0
 53a:	80 ef       	ldi	r24, 0xF0	; 240
 53c:	91 e4       	ldi	r25, 0x41	; 65
 53e:	0e 94 b2 02 	call	0x564	; 0x564 <__subsf3>
 542:	20 e0       	ldi	r18, 0x00	; 0
 544:	30 e0       	ldi	r19, 0x00	; 0
 546:	40 e4       	ldi	r20, 0x40	; 64
 548:	50 e4       	ldi	r21, 0x40	; 64
 54a:	0e 94 b3 02 	call	0x566	; 0x566 <__addsf3>
 54e:	0e 94 91 03 	call	0x722	; 0x722 <__fixsfsi>
			colors(position);
 552:	cb 01       	movw	r24, r22
 554:	0e 94 3a 01 	call	0x274	; 0x274 <colors>
 558:	7a cf       	rjmp	.-268    	; 0x44e <main+0x4>
 		}
		else
		{
			resetLED();
 55a:	0e 94 0d 01 	call	0x21a	; 0x21a <resetLED>
			OCR0A = 0;
 55e:	17 bc       	out	0x27, r1	; 39
			OCR0B = 0;
 560:	18 bc       	out	0x28, r1	; 40
 562:	75 cf       	rjmp	.-278    	; 0x44e <main+0x4>

00000564 <__subsf3>:
 564:	50 58       	subi	r21, 0x80	; 128

00000566 <__addsf3>:
 566:	bb 27       	eor	r27, r27
 568:	aa 27       	eor	r26, r26
 56a:	0e 94 ca 02 	call	0x594	; 0x594 <__addsf3x>
 56e:	0c 94 1b 04 	jmp	0x836	; 0x836 <__fp_round>
 572:	0e 94 0d 04 	call	0x81a	; 0x81a <__fp_pscA>
 576:	38 f0       	brcs	.+14     	; 0x586 <__addsf3+0x20>
 578:	0e 94 14 04 	call	0x828	; 0x828 <__fp_pscB>
 57c:	20 f0       	brcs	.+8      	; 0x586 <__addsf3+0x20>
 57e:	39 f4       	brne	.+14     	; 0x58e <__addsf3+0x28>
 580:	9f 3f       	cpi	r25, 0xFF	; 255
 582:	19 f4       	brne	.+6      	; 0x58a <__addsf3+0x24>
 584:	26 f4       	brtc	.+8      	; 0x58e <__addsf3+0x28>
 586:	0c 94 0a 04 	jmp	0x814	; 0x814 <__fp_nan>
 58a:	0e f4       	brtc	.+2      	; 0x58e <__addsf3+0x28>
 58c:	e0 95       	com	r30
 58e:	e7 fb       	bst	r30, 7
 590:	0c 94 04 04 	jmp	0x808	; 0x808 <__fp_inf>

00000594 <__addsf3x>:
 594:	e9 2f       	mov	r30, r25
 596:	0e 94 2c 04 	call	0x858	; 0x858 <__fp_split3>
 59a:	58 f3       	brcs	.-42     	; 0x572 <__addsf3+0xc>
 59c:	ba 17       	cp	r27, r26
 59e:	62 07       	cpc	r22, r18
 5a0:	73 07       	cpc	r23, r19
 5a2:	84 07       	cpc	r24, r20
 5a4:	95 07       	cpc	r25, r21
 5a6:	20 f0       	brcs	.+8      	; 0x5b0 <__addsf3x+0x1c>
 5a8:	79 f4       	brne	.+30     	; 0x5c8 <__addsf3x+0x34>
 5aa:	a6 f5       	brtc	.+104    	; 0x614 <__addsf3x+0x80>
 5ac:	0c 94 4e 04 	jmp	0x89c	; 0x89c <__fp_zero>
 5b0:	0e f4       	brtc	.+2      	; 0x5b4 <__addsf3x+0x20>
 5b2:	e0 95       	com	r30
 5b4:	0b 2e       	mov	r0, r27
 5b6:	ba 2f       	mov	r27, r26
 5b8:	a0 2d       	mov	r26, r0
 5ba:	0b 01       	movw	r0, r22
 5bc:	b9 01       	movw	r22, r18
 5be:	90 01       	movw	r18, r0
 5c0:	0c 01       	movw	r0, r24
 5c2:	ca 01       	movw	r24, r20
 5c4:	a0 01       	movw	r20, r0
 5c6:	11 24       	eor	r1, r1
 5c8:	ff 27       	eor	r31, r31
 5ca:	59 1b       	sub	r21, r25
 5cc:	99 f0       	breq	.+38     	; 0x5f4 <__addsf3x+0x60>
 5ce:	59 3f       	cpi	r21, 0xF9	; 249
 5d0:	50 f4       	brcc	.+20     	; 0x5e6 <__addsf3x+0x52>
 5d2:	50 3e       	cpi	r21, 0xE0	; 224
 5d4:	68 f1       	brcs	.+90     	; 0x630 <__addsf3x+0x9c>
 5d6:	1a 16       	cp	r1, r26
 5d8:	f0 40       	sbci	r31, 0x00	; 0
 5da:	a2 2f       	mov	r26, r18
 5dc:	23 2f       	mov	r18, r19
 5de:	34 2f       	mov	r19, r20
 5e0:	44 27       	eor	r20, r20
 5e2:	58 5f       	subi	r21, 0xF8	; 248
 5e4:	f3 cf       	rjmp	.-26     	; 0x5cc <__addsf3x+0x38>
 5e6:	46 95       	lsr	r20
 5e8:	37 95       	ror	r19
 5ea:	27 95       	ror	r18
 5ec:	a7 95       	ror	r26
 5ee:	f0 40       	sbci	r31, 0x00	; 0
 5f0:	53 95       	inc	r21
 5f2:	c9 f7       	brne	.-14     	; 0x5e6 <__addsf3x+0x52>
 5f4:	7e f4       	brtc	.+30     	; 0x614 <__addsf3x+0x80>
 5f6:	1f 16       	cp	r1, r31
 5f8:	ba 0b       	sbc	r27, r26
 5fa:	62 0b       	sbc	r22, r18
 5fc:	73 0b       	sbc	r23, r19
 5fe:	84 0b       	sbc	r24, r20
 600:	ba f0       	brmi	.+46     	; 0x630 <__addsf3x+0x9c>
 602:	91 50       	subi	r25, 0x01	; 1
 604:	a1 f0       	breq	.+40     	; 0x62e <__addsf3x+0x9a>
 606:	ff 0f       	add	r31, r31
 608:	bb 1f       	adc	r27, r27
 60a:	66 1f       	adc	r22, r22
 60c:	77 1f       	adc	r23, r23
 60e:	88 1f       	adc	r24, r24
 610:	c2 f7       	brpl	.-16     	; 0x602 <__addsf3x+0x6e>
 612:	0e c0       	rjmp	.+28     	; 0x630 <__addsf3x+0x9c>
 614:	ba 0f       	add	r27, r26
 616:	62 1f       	adc	r22, r18
 618:	73 1f       	adc	r23, r19
 61a:	84 1f       	adc	r24, r20
 61c:	48 f4       	brcc	.+18     	; 0x630 <__addsf3x+0x9c>
 61e:	87 95       	ror	r24
 620:	77 95       	ror	r23
 622:	67 95       	ror	r22
 624:	b7 95       	ror	r27
 626:	f7 95       	ror	r31
 628:	9e 3f       	cpi	r25, 0xFE	; 254
 62a:	08 f0       	brcs	.+2      	; 0x62e <__addsf3x+0x9a>
 62c:	b0 cf       	rjmp	.-160    	; 0x58e <__addsf3+0x28>
 62e:	93 95       	inc	r25
 630:	88 0f       	add	r24, r24
 632:	08 f0       	brcs	.+2      	; 0x636 <__addsf3x+0xa2>
 634:	99 27       	eor	r25, r25
 636:	ee 0f       	add	r30, r30
 638:	97 95       	ror	r25
 63a:	87 95       	ror	r24
 63c:	08 95       	ret

0000063e <__divsf3>:
 63e:	0e 94 33 03 	call	0x666	; 0x666 <__divsf3x>
 642:	0c 94 1b 04 	jmp	0x836	; 0x836 <__fp_round>
 646:	0e 94 14 04 	call	0x828	; 0x828 <__fp_pscB>
 64a:	58 f0       	brcs	.+22     	; 0x662 <__divsf3+0x24>
 64c:	0e 94 0d 04 	call	0x81a	; 0x81a <__fp_pscA>
 650:	40 f0       	brcs	.+16     	; 0x662 <__divsf3+0x24>
 652:	29 f4       	brne	.+10     	; 0x65e <__divsf3+0x20>
 654:	5f 3f       	cpi	r21, 0xFF	; 255
 656:	29 f0       	breq	.+10     	; 0x662 <__divsf3+0x24>
 658:	0c 94 04 04 	jmp	0x808	; 0x808 <__fp_inf>
 65c:	51 11       	cpse	r21, r1
 65e:	0c 94 4f 04 	jmp	0x89e	; 0x89e <__fp_szero>
 662:	0c 94 0a 04 	jmp	0x814	; 0x814 <__fp_nan>

00000666 <__divsf3x>:
 666:	0e 94 2c 04 	call	0x858	; 0x858 <__fp_split3>
 66a:	68 f3       	brcs	.-38     	; 0x646 <__divsf3+0x8>

0000066c <__divsf3_pse>:
 66c:	99 23       	and	r25, r25
 66e:	b1 f3       	breq	.-20     	; 0x65c <__divsf3+0x1e>
 670:	55 23       	and	r21, r21
 672:	91 f3       	breq	.-28     	; 0x658 <__divsf3+0x1a>
 674:	95 1b       	sub	r25, r21
 676:	55 0b       	sbc	r21, r21
 678:	bb 27       	eor	r27, r27
 67a:	aa 27       	eor	r26, r26
 67c:	62 17       	cp	r22, r18
 67e:	73 07       	cpc	r23, r19
 680:	84 07       	cpc	r24, r20
 682:	38 f0       	brcs	.+14     	; 0x692 <__divsf3_pse+0x26>
 684:	9f 5f       	subi	r25, 0xFF	; 255
 686:	5f 4f       	sbci	r21, 0xFF	; 255
 688:	22 0f       	add	r18, r18
 68a:	33 1f       	adc	r19, r19
 68c:	44 1f       	adc	r20, r20
 68e:	aa 1f       	adc	r26, r26
 690:	a9 f3       	breq	.-22     	; 0x67c <__divsf3_pse+0x10>
 692:	35 d0       	rcall	.+106    	; 0x6fe <__divsf3_pse+0x92>
 694:	0e 2e       	mov	r0, r30
 696:	3a f0       	brmi	.+14     	; 0x6a6 <__divsf3_pse+0x3a>
 698:	e0 e8       	ldi	r30, 0x80	; 128
 69a:	32 d0       	rcall	.+100    	; 0x700 <__divsf3_pse+0x94>
 69c:	91 50       	subi	r25, 0x01	; 1
 69e:	50 40       	sbci	r21, 0x00	; 0
 6a0:	e6 95       	lsr	r30
 6a2:	00 1c       	adc	r0, r0
 6a4:	ca f7       	brpl	.-14     	; 0x698 <__divsf3_pse+0x2c>
 6a6:	2b d0       	rcall	.+86     	; 0x6fe <__divsf3_pse+0x92>
 6a8:	fe 2f       	mov	r31, r30
 6aa:	29 d0       	rcall	.+82     	; 0x6fe <__divsf3_pse+0x92>
 6ac:	66 0f       	add	r22, r22
 6ae:	77 1f       	adc	r23, r23
 6b0:	88 1f       	adc	r24, r24
 6b2:	bb 1f       	adc	r27, r27
 6b4:	26 17       	cp	r18, r22
 6b6:	37 07       	cpc	r19, r23
 6b8:	48 07       	cpc	r20, r24
 6ba:	ab 07       	cpc	r26, r27
 6bc:	b0 e8       	ldi	r27, 0x80	; 128
 6be:	09 f0       	breq	.+2      	; 0x6c2 <__divsf3_pse+0x56>
 6c0:	bb 0b       	sbc	r27, r27
 6c2:	80 2d       	mov	r24, r0
 6c4:	bf 01       	movw	r22, r30
 6c6:	ff 27       	eor	r31, r31
 6c8:	93 58       	subi	r25, 0x83	; 131
 6ca:	5f 4f       	sbci	r21, 0xFF	; 255
 6cc:	3a f0       	brmi	.+14     	; 0x6dc <__divsf3_pse+0x70>
 6ce:	9e 3f       	cpi	r25, 0xFE	; 254
 6d0:	51 05       	cpc	r21, r1
 6d2:	78 f0       	brcs	.+30     	; 0x6f2 <__divsf3_pse+0x86>
 6d4:	0c 94 04 04 	jmp	0x808	; 0x808 <__fp_inf>
 6d8:	0c 94 4f 04 	jmp	0x89e	; 0x89e <__fp_szero>
 6dc:	5f 3f       	cpi	r21, 0xFF	; 255
 6de:	e4 f3       	brlt	.-8      	; 0x6d8 <__divsf3_pse+0x6c>
 6e0:	98 3e       	cpi	r25, 0xE8	; 232
 6e2:	d4 f3       	brlt	.-12     	; 0x6d8 <__divsf3_pse+0x6c>
 6e4:	86 95       	lsr	r24
 6e6:	77 95       	ror	r23
 6e8:	67 95       	ror	r22
 6ea:	b7 95       	ror	r27
 6ec:	f7 95       	ror	r31
 6ee:	9f 5f       	subi	r25, 0xFF	; 255
 6f0:	c9 f7       	brne	.-14     	; 0x6e4 <__divsf3_pse+0x78>
 6f2:	88 0f       	add	r24, r24
 6f4:	91 1d       	adc	r25, r1
 6f6:	96 95       	lsr	r25
 6f8:	87 95       	ror	r24
 6fa:	97 f9       	bld	r25, 7
 6fc:	08 95       	ret
 6fe:	e1 e0       	ldi	r30, 0x01	; 1
 700:	66 0f       	add	r22, r22
 702:	77 1f       	adc	r23, r23
 704:	88 1f       	adc	r24, r24
 706:	bb 1f       	adc	r27, r27
 708:	62 17       	cp	r22, r18
 70a:	73 07       	cpc	r23, r19
 70c:	84 07       	cpc	r24, r20
 70e:	ba 07       	cpc	r27, r26
 710:	20 f0       	brcs	.+8      	; 0x71a <__divsf3_pse+0xae>
 712:	62 1b       	sub	r22, r18
 714:	73 0b       	sbc	r23, r19
 716:	84 0b       	sbc	r24, r20
 718:	ba 0b       	sbc	r27, r26
 71a:	ee 1f       	adc	r30, r30
 71c:	88 f7       	brcc	.-30     	; 0x700 <__divsf3_pse+0x94>
 71e:	e0 95       	com	r30
 720:	08 95       	ret

00000722 <__fixsfsi>:
 722:	0e 94 98 03 	call	0x730	; 0x730 <__fixunssfsi>
 726:	68 94       	set
 728:	b1 11       	cpse	r27, r1
 72a:	0c 94 4f 04 	jmp	0x89e	; 0x89e <__fp_szero>
 72e:	08 95       	ret

00000730 <__fixunssfsi>:
 730:	0e 94 34 04 	call	0x868	; 0x868 <__fp_splitA>
 734:	88 f0       	brcs	.+34     	; 0x758 <__fixunssfsi+0x28>
 736:	9f 57       	subi	r25, 0x7F	; 127
 738:	98 f0       	brcs	.+38     	; 0x760 <__fixunssfsi+0x30>
 73a:	b9 2f       	mov	r27, r25
 73c:	99 27       	eor	r25, r25
 73e:	b7 51       	subi	r27, 0x17	; 23
 740:	b0 f0       	brcs	.+44     	; 0x76e <__fixunssfsi+0x3e>
 742:	e1 f0       	breq	.+56     	; 0x77c <__fixunssfsi+0x4c>
 744:	66 0f       	add	r22, r22
 746:	77 1f       	adc	r23, r23
 748:	88 1f       	adc	r24, r24
 74a:	99 1f       	adc	r25, r25
 74c:	1a f0       	brmi	.+6      	; 0x754 <__fixunssfsi+0x24>
 74e:	ba 95       	dec	r27
 750:	c9 f7       	brne	.-14     	; 0x744 <__fixunssfsi+0x14>
 752:	14 c0       	rjmp	.+40     	; 0x77c <__fixunssfsi+0x4c>
 754:	b1 30       	cpi	r27, 0x01	; 1
 756:	91 f0       	breq	.+36     	; 0x77c <__fixunssfsi+0x4c>
 758:	0e 94 4e 04 	call	0x89c	; 0x89c <__fp_zero>
 75c:	b1 e0       	ldi	r27, 0x01	; 1
 75e:	08 95       	ret
 760:	0c 94 4e 04 	jmp	0x89c	; 0x89c <__fp_zero>
 764:	67 2f       	mov	r22, r23
 766:	78 2f       	mov	r23, r24
 768:	88 27       	eor	r24, r24
 76a:	b8 5f       	subi	r27, 0xF8	; 248
 76c:	39 f0       	breq	.+14     	; 0x77c <__fixunssfsi+0x4c>
 76e:	b9 3f       	cpi	r27, 0xF9	; 249
 770:	cc f3       	brlt	.-14     	; 0x764 <__fixunssfsi+0x34>
 772:	86 95       	lsr	r24
 774:	77 95       	ror	r23
 776:	67 95       	ror	r22
 778:	b3 95       	inc	r27
 77a:	d9 f7       	brne	.-10     	; 0x772 <__fixunssfsi+0x42>
 77c:	3e f4       	brtc	.+14     	; 0x78c <__fixunssfsi+0x5c>
 77e:	90 95       	com	r25
 780:	80 95       	com	r24
 782:	70 95       	com	r23
 784:	61 95       	neg	r22
 786:	7f 4f       	sbci	r23, 0xFF	; 255
 788:	8f 4f       	sbci	r24, 0xFF	; 255
 78a:	9f 4f       	sbci	r25, 0xFF	; 255
 78c:	08 95       	ret

0000078e <__floatunsisf>:
 78e:	e8 94       	clt
 790:	09 c0       	rjmp	.+18     	; 0x7a4 <__floatsisf+0x12>

00000792 <__floatsisf>:
 792:	97 fb       	bst	r25, 7
 794:	3e f4       	brtc	.+14     	; 0x7a4 <__floatsisf+0x12>
 796:	90 95       	com	r25
 798:	80 95       	com	r24
 79a:	70 95       	com	r23
 79c:	61 95       	neg	r22
 79e:	7f 4f       	sbci	r23, 0xFF	; 255
 7a0:	8f 4f       	sbci	r24, 0xFF	; 255
 7a2:	9f 4f       	sbci	r25, 0xFF	; 255
 7a4:	99 23       	and	r25, r25
 7a6:	a9 f0       	breq	.+42     	; 0x7d2 <__floatsisf+0x40>
 7a8:	f9 2f       	mov	r31, r25
 7aa:	96 e9       	ldi	r25, 0x96	; 150
 7ac:	bb 27       	eor	r27, r27
 7ae:	93 95       	inc	r25
 7b0:	f6 95       	lsr	r31
 7b2:	87 95       	ror	r24
 7b4:	77 95       	ror	r23
 7b6:	67 95       	ror	r22
 7b8:	b7 95       	ror	r27
 7ba:	f1 11       	cpse	r31, r1
 7bc:	f8 cf       	rjmp	.-16     	; 0x7ae <__floatsisf+0x1c>
 7be:	fa f4       	brpl	.+62     	; 0x7fe <__floatsisf+0x6c>
 7c0:	bb 0f       	add	r27, r27
 7c2:	11 f4       	brne	.+4      	; 0x7c8 <__floatsisf+0x36>
 7c4:	60 ff       	sbrs	r22, 0
 7c6:	1b c0       	rjmp	.+54     	; 0x7fe <__floatsisf+0x6c>
 7c8:	6f 5f       	subi	r22, 0xFF	; 255
 7ca:	7f 4f       	sbci	r23, 0xFF	; 255
 7cc:	8f 4f       	sbci	r24, 0xFF	; 255
 7ce:	9f 4f       	sbci	r25, 0xFF	; 255
 7d0:	16 c0       	rjmp	.+44     	; 0x7fe <__floatsisf+0x6c>
 7d2:	88 23       	and	r24, r24
 7d4:	11 f0       	breq	.+4      	; 0x7da <__floatsisf+0x48>
 7d6:	96 e9       	ldi	r25, 0x96	; 150
 7d8:	11 c0       	rjmp	.+34     	; 0x7fc <__floatsisf+0x6a>
 7da:	77 23       	and	r23, r23
 7dc:	21 f0       	breq	.+8      	; 0x7e6 <__floatsisf+0x54>
 7de:	9e e8       	ldi	r25, 0x8E	; 142
 7e0:	87 2f       	mov	r24, r23
 7e2:	76 2f       	mov	r23, r22
 7e4:	05 c0       	rjmp	.+10     	; 0x7f0 <__floatsisf+0x5e>
 7e6:	66 23       	and	r22, r22
 7e8:	71 f0       	breq	.+28     	; 0x806 <__DATA_REGION_LENGTH__+0x6>
 7ea:	96 e8       	ldi	r25, 0x86	; 134
 7ec:	86 2f       	mov	r24, r22
 7ee:	70 e0       	ldi	r23, 0x00	; 0
 7f0:	60 e0       	ldi	r22, 0x00	; 0
 7f2:	2a f0       	brmi	.+10     	; 0x7fe <__floatsisf+0x6c>
 7f4:	9a 95       	dec	r25
 7f6:	66 0f       	add	r22, r22
 7f8:	77 1f       	adc	r23, r23
 7fa:	88 1f       	adc	r24, r24
 7fc:	da f7       	brpl	.-10     	; 0x7f4 <__floatsisf+0x62>
 7fe:	88 0f       	add	r24, r24
 800:	96 95       	lsr	r25
 802:	87 95       	ror	r24
 804:	97 f9       	bld	r25, 7
 806:	08 95       	ret

00000808 <__fp_inf>:
 808:	97 f9       	bld	r25, 7
 80a:	9f 67       	ori	r25, 0x7F	; 127
 80c:	80 e8       	ldi	r24, 0x80	; 128
 80e:	70 e0       	ldi	r23, 0x00	; 0
 810:	60 e0       	ldi	r22, 0x00	; 0
 812:	08 95       	ret

00000814 <__fp_nan>:
 814:	9f ef       	ldi	r25, 0xFF	; 255
 816:	80 ec       	ldi	r24, 0xC0	; 192
 818:	08 95       	ret

0000081a <__fp_pscA>:
 81a:	00 24       	eor	r0, r0
 81c:	0a 94       	dec	r0
 81e:	16 16       	cp	r1, r22
 820:	17 06       	cpc	r1, r23
 822:	18 06       	cpc	r1, r24
 824:	09 06       	cpc	r0, r25
 826:	08 95       	ret

00000828 <__fp_pscB>:
 828:	00 24       	eor	r0, r0
 82a:	0a 94       	dec	r0
 82c:	12 16       	cp	r1, r18
 82e:	13 06       	cpc	r1, r19
 830:	14 06       	cpc	r1, r20
 832:	05 06       	cpc	r0, r21
 834:	08 95       	ret

00000836 <__fp_round>:
 836:	09 2e       	mov	r0, r25
 838:	03 94       	inc	r0
 83a:	00 0c       	add	r0, r0
 83c:	11 f4       	brne	.+4      	; 0x842 <__fp_round+0xc>
 83e:	88 23       	and	r24, r24
 840:	52 f0       	brmi	.+20     	; 0x856 <__fp_round+0x20>
 842:	bb 0f       	add	r27, r27
 844:	40 f4       	brcc	.+16     	; 0x856 <__fp_round+0x20>
 846:	bf 2b       	or	r27, r31
 848:	11 f4       	brne	.+4      	; 0x84e <__fp_round+0x18>
 84a:	60 ff       	sbrs	r22, 0
 84c:	04 c0       	rjmp	.+8      	; 0x856 <__fp_round+0x20>
 84e:	6f 5f       	subi	r22, 0xFF	; 255
 850:	7f 4f       	sbci	r23, 0xFF	; 255
 852:	8f 4f       	sbci	r24, 0xFF	; 255
 854:	9f 4f       	sbci	r25, 0xFF	; 255
 856:	08 95       	ret

00000858 <__fp_split3>:
 858:	57 fd       	sbrc	r21, 7
 85a:	90 58       	subi	r25, 0x80	; 128
 85c:	44 0f       	add	r20, r20
 85e:	55 1f       	adc	r21, r21
 860:	59 f0       	breq	.+22     	; 0x878 <__fp_splitA+0x10>
 862:	5f 3f       	cpi	r21, 0xFF	; 255
 864:	71 f0       	breq	.+28     	; 0x882 <__fp_splitA+0x1a>
 866:	47 95       	ror	r20

00000868 <__fp_splitA>:
 868:	88 0f       	add	r24, r24
 86a:	97 fb       	bst	r25, 7
 86c:	99 1f       	adc	r25, r25
 86e:	61 f0       	breq	.+24     	; 0x888 <__fp_splitA+0x20>
 870:	9f 3f       	cpi	r25, 0xFF	; 255
 872:	79 f0       	breq	.+30     	; 0x892 <__fp_splitA+0x2a>
 874:	87 95       	ror	r24
 876:	08 95       	ret
 878:	12 16       	cp	r1, r18
 87a:	13 06       	cpc	r1, r19
 87c:	14 06       	cpc	r1, r20
 87e:	55 1f       	adc	r21, r21
 880:	f2 cf       	rjmp	.-28     	; 0x866 <__fp_split3+0xe>
 882:	46 95       	lsr	r20
 884:	f1 df       	rcall	.-30     	; 0x868 <__fp_splitA>
 886:	08 c0       	rjmp	.+16     	; 0x898 <__fp_splitA+0x30>
 888:	16 16       	cp	r1, r22
 88a:	17 06       	cpc	r1, r23
 88c:	18 06       	cpc	r1, r24
 88e:	99 1f       	adc	r25, r25
 890:	f1 cf       	rjmp	.-30     	; 0x874 <__fp_splitA+0xc>
 892:	86 95       	lsr	r24
 894:	71 05       	cpc	r23, r1
 896:	61 05       	cpc	r22, r1
 898:	08 94       	sec
 89a:	08 95       	ret

0000089c <__fp_zero>:
 89c:	e8 94       	clt

0000089e <__fp_szero>:
 89e:	bb 27       	eor	r27, r27
 8a0:	66 27       	eor	r22, r22
 8a2:	77 27       	eor	r23, r23
 8a4:	cb 01       	movw	r24, r22
 8a6:	97 f9       	bld	r25, 7
 8a8:	08 95       	ret

000008aa <__mulsf3>:
 8aa:	0e 94 68 04 	call	0x8d0	; 0x8d0 <__mulsf3x>
 8ae:	0c 94 1b 04 	jmp	0x836	; 0x836 <__fp_round>
 8b2:	0e 94 0d 04 	call	0x81a	; 0x81a <__fp_pscA>
 8b6:	38 f0       	brcs	.+14     	; 0x8c6 <__mulsf3+0x1c>
 8b8:	0e 94 14 04 	call	0x828	; 0x828 <__fp_pscB>
 8bc:	20 f0       	brcs	.+8      	; 0x8c6 <__mulsf3+0x1c>
 8be:	95 23       	and	r25, r21
 8c0:	11 f0       	breq	.+4      	; 0x8c6 <__mulsf3+0x1c>
 8c2:	0c 94 04 04 	jmp	0x808	; 0x808 <__fp_inf>
 8c6:	0c 94 0a 04 	jmp	0x814	; 0x814 <__fp_nan>
 8ca:	11 24       	eor	r1, r1
 8cc:	0c 94 4f 04 	jmp	0x89e	; 0x89e <__fp_szero>

000008d0 <__mulsf3x>:
 8d0:	0e 94 2c 04 	call	0x858	; 0x858 <__fp_split3>
 8d4:	70 f3       	brcs	.-36     	; 0x8b2 <__mulsf3+0x8>

000008d6 <__mulsf3_pse>:
 8d6:	95 9f       	mul	r25, r21
 8d8:	c1 f3       	breq	.-16     	; 0x8ca <__mulsf3+0x20>
 8da:	95 0f       	add	r25, r21
 8dc:	50 e0       	ldi	r21, 0x00	; 0
 8de:	55 1f       	adc	r21, r21
 8e0:	62 9f       	mul	r22, r18
 8e2:	f0 01       	movw	r30, r0
 8e4:	72 9f       	mul	r23, r18
 8e6:	bb 27       	eor	r27, r27
 8e8:	f0 0d       	add	r31, r0
 8ea:	b1 1d       	adc	r27, r1
 8ec:	63 9f       	mul	r22, r19
 8ee:	aa 27       	eor	r26, r26
 8f0:	f0 0d       	add	r31, r0
 8f2:	b1 1d       	adc	r27, r1
 8f4:	aa 1f       	adc	r26, r26
 8f6:	64 9f       	mul	r22, r20
 8f8:	66 27       	eor	r22, r22
 8fa:	b0 0d       	add	r27, r0
 8fc:	a1 1d       	adc	r26, r1
 8fe:	66 1f       	adc	r22, r22
 900:	82 9f       	mul	r24, r18
 902:	22 27       	eor	r18, r18
 904:	b0 0d       	add	r27, r0
 906:	a1 1d       	adc	r26, r1
 908:	62 1f       	adc	r22, r18
 90a:	73 9f       	mul	r23, r19
 90c:	b0 0d       	add	r27, r0
 90e:	a1 1d       	adc	r26, r1
 910:	62 1f       	adc	r22, r18
 912:	83 9f       	mul	r24, r19
 914:	a0 0d       	add	r26, r0
 916:	61 1d       	adc	r22, r1
 918:	22 1f       	adc	r18, r18
 91a:	74 9f       	mul	r23, r20
 91c:	33 27       	eor	r19, r19
 91e:	a0 0d       	add	r26, r0
 920:	61 1d       	adc	r22, r1
 922:	23 1f       	adc	r18, r19
 924:	84 9f       	mul	r24, r20
 926:	60 0d       	add	r22, r0
 928:	21 1d       	adc	r18, r1
 92a:	82 2f       	mov	r24, r18
 92c:	76 2f       	mov	r23, r22
 92e:	6a 2f       	mov	r22, r26
 930:	11 24       	eor	r1, r1
 932:	9f 57       	subi	r25, 0x7F	; 127
 934:	50 40       	sbci	r21, 0x00	; 0
 936:	9a f0       	brmi	.+38     	; 0x95e <__stack+0x5f>
 938:	f1 f0       	breq	.+60     	; 0x976 <__stack+0x77>
 93a:	88 23       	and	r24, r24
 93c:	4a f0       	brmi	.+18     	; 0x950 <__stack+0x51>
 93e:	ee 0f       	add	r30, r30
 940:	ff 1f       	adc	r31, r31
 942:	bb 1f       	adc	r27, r27
 944:	66 1f       	adc	r22, r22
 946:	77 1f       	adc	r23, r23
 948:	88 1f       	adc	r24, r24
 94a:	91 50       	subi	r25, 0x01	; 1
 94c:	50 40       	sbci	r21, 0x00	; 0
 94e:	a9 f7       	brne	.-22     	; 0x93a <__stack+0x3b>
 950:	9e 3f       	cpi	r25, 0xFE	; 254
 952:	51 05       	cpc	r21, r1
 954:	80 f0       	brcs	.+32     	; 0x976 <__stack+0x77>
 956:	0c 94 04 04 	jmp	0x808	; 0x808 <__fp_inf>
 95a:	0c 94 4f 04 	jmp	0x89e	; 0x89e <__fp_szero>
 95e:	5f 3f       	cpi	r21, 0xFF	; 255
 960:	e4 f3       	brlt	.-8      	; 0x95a <__stack+0x5b>
 962:	98 3e       	cpi	r25, 0xE8	; 232
 964:	d4 f3       	brlt	.-12     	; 0x95a <__stack+0x5b>
 966:	86 95       	lsr	r24
 968:	77 95       	ror	r23
 96a:	67 95       	ror	r22
 96c:	b7 95       	ror	r27
 96e:	f7 95       	ror	r31
 970:	e7 95       	ror	r30
 972:	9f 5f       	subi	r25, 0xFF	; 255
 974:	c1 f7       	brne	.-16     	; 0x966 <__stack+0x67>
 976:	fe 2b       	or	r31, r30
 978:	88 0f       	add	r24, r24
 97a:	91 1d       	adc	r25, r1
 97c:	96 95       	lsr	r25
 97e:	87 95       	ror	r24
 980:	97 f9       	bld	r25, 7
 982:	08 95       	ret

00000984 <_exit>:
 984:	f8 94       	cli

00000986 <__stop_program>:
 986:	ff cf       	rjmp	.-2      	; 0x986 <__stop_program>
